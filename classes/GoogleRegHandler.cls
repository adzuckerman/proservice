//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class GoogleRegHandler implements Auth.RegistrationHandler{
global boolean canCreateUser(Auth.UserData data) {
    //TODO: Check whether we want to allow creation of a user with this data
    String email = data.email;
    
    if(email.contains('@proservice.com')) {
        return true;
    }
    
    return false;
}

public static Boolean runningInASandbox() {
  return [SELECT IsSandbox FROM Organization LIMIT 1].IsSandbox;
}

global User createUser(Id portalId, Auth.UserData data){
    system.debug('Google Reg Handler createUser for: ' + data.email);

    if(!canCreateUser(data)) {
        system.debug('Google Reg Handler createUser cannot create user');
        //Returning null or throwing an exception fails the SSO flow
        return null;
    }
    
    system.debug('Google Reg Handler createUser can create user');
    
    String usernameSandboxAppend = '';
    
    // If the email scope has been set we will receive the users email address
    try {
        if (runningInASandbox() && !data.email.contains('.sbtesting')) {
            system.debug('Google Reg Handler createUser in sandbox - appending instance name to username');
            usernameSandboxAppend = '.sbtesting';
        }
    }
    catch (Exception e) {
        return null;
    }
    
    String email = data.email + usernameSandboxAppend;
    if (email == null) {
        system.debug('Google Reg Handler createUser - email is null');
        return null;
    }
    
    // Attempt to find a user with the same email address
    User u;
    
    try {
        u = [Select Id, FirstName, LastName, Email, Username from User Where Username = :email];
    }
    catch (Exception e) {
        return null;
    }
    
    return u;
    
    //The user is authorized, so create their Salesforce user
    //User u = new User();
    //Profile p = [SELECT Id FROM profile WHERE name='Standard User'];
    //TODO: Customize the username. Also check that the username doesn't already exist and
    //possibly ensure there are enough org licenses to create a user. Must be 80 characters
    //or less.
    //u.username = data.username + '@myorg.com';
    //u.email = data.email;
    //u.lastName = data.lastName;
    //u.firstName = data.firstName;
    //String alias = data.username;
    //Alias must be 8 characters or less
    //if(alias.length() > 8) {
    //    alias = alias.substring(0, 8);
    //}
    //u.alias = alias;
    //u.languagelocalekey = UserInfo.getLocale();
    //u.localesidkey = UserInfo.getLocale();
    //u.emailEncodingKey = 'UTF-8';
    //u.timeZoneSidKey = 'America/Los_Angeles';
    //u.profileId = p.Id;
    //return u;
}

global void updateUser(Id userId, Id portalId, Auth.UserData data){
    // No updates for now

    //User u = new User(id=userId);
    //TODO: Customize the username. Must be 80 characters or less.
    //u.username = data.username + '@myorg.com';
    //u.email = data.email;
    //u.lastName = data.lastName;
    //u.firstName = data.firstName;
    //String alias = data.username;
    //Alias must be 8 characters or less
    //if(alias.length() > 8) {
        //alias = alias.substring(0, 8);
    //}
    //u.alias = alias;
    //update(u);
}
}